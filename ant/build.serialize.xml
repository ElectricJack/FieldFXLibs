<?xml version="1.0" encoding="UTF-8"?>
<project name="fieldfxlibs" default="release">
    <property file="build.properties" />
    <property file="versions.properties" />
    
    <property name="project.name"     value="fieldfx-serialize" />
    <property name="srcfolder.id"     value="serialize" />
    <property name="lib.version"      value="${version.serialize}" />
    <property name="lib.zip.comment"  value="${project.name} - Serialization v${lib.version}" />
    <property name="lib.jar.filename" value="${project.name}.jar" />

    <property file="${srcfolder.id}.properties"/>

    <!-- ============================================================================================== -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="../res/code/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- ============================================================================================== -->
    <!-- Basic targets -->
    <target name="init">
        <property name="src.dir"                  value="../src.${srcfolder.id}" />
        <property name="build.dir"                value="../build" />
        <property name="release.dir"              value="../dist" />
        <!-- build folder contains temporary files needed to create release level files -->
        <property name="build.classes.dir"        value="${build.dir}" />
        <property name="build.manifest"           value="${build.dir}/${project.name}.mf" />
        <property name="build.jar"                value="${build.dir}/${lib.jar.filename}" />
        <!-- release folder contains files which may be distributed in some way or another -->
        <property name="release.javadoc.dir"      value="../docs" />
        <property name="release.jar"              value="${release.dir}/${lib.jar.filename}" />
        <property name="release.src.zip"          value="${release.dir}/${project.name}-${lib.version}-src.zip" />
        <property name="release.bin.zip"          value="${release.dir}/${project.name}-${lib.version}.zip" />
        <property name="release.examples.zip"     value="${release.dir}/${project.name}-${lib.version}-examples.zip" />
        <property name="release.examples.dir"     value="../examples/${srcfolder.id}" />
        <property name="release.web.dir"          value="${release.dir}/web/${project.name}" />
        <property name="readme.dir"               value="../readme/${srcfolder.id}" />
        <property name="export.txt"               value="${release.dir}/export.txt" />
        <property name="install.source"           value="res/install_instructions.txt" />
        <property name="install.destination"      value="${release.dir}/INSTALL.txt" />
    </target>

    <!-- ============================================================================================== -->
    <target name="clean" depends="init" description="Remove build files created by this scripts">
        <delete dir="${build.dir}" />
        <delete dir="${release.javadoc.dir}" />
        <delete file="${release.bin.zip}/" />
        <delete file="${release.src.zip}/" />
    </target>

    <!-- ============================================================================================== -->
    <target name="compile" depends="init" description="Compile source">
        <mkdir dir="${build.classes.dir}" />
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}" source="${lib.jdk.level}" target="${lib.jdk.level}" includeantruntime="false">
                <compilerarg value="-Xlint:unchecked" />
                <classpath>
                </classpath>
                <classpath>
                    <pathelement location="../lib/core.jar" />
                </classpath>
        </javac>
    </target>

    <!-- ============================================================================================== -->
    <target name="create_manifest" depends="compile" description="Create the jar manifest">
        <echo file="${build.manifest}" append="false" message="Manifest-Version: 1.0${line.separator}" />
    </target>

    <!-- ============================================================================================== -->
    <target name="jars" depends="create_manifest" description="Create jar files required for execution">
        <mkdir dir="${release.dir}" />
        <jar jarfile="${release.jar}" manifest="${build.manifest}">
            <fileset dir="${build.classes.dir}" />
        </jar>
    </target>

    <!-- ============================================================================================== -->
    <!-- release directory targets -->
    <target name="zips" depends="jars" description="Create release zip files">
        <mkdir dir="${release.dir}" />
        <zip destfile="${release.bin.zip}"   comment="${lib.zip.comment} - Binary release">
            <zipfileset dir="${release.dir}" includes="${project.name}.jar" prefix="${project.name}/library" />
            <zipfileset dir="${release.javadoc.dir}"                        prefix="${project.name}/docs" />
            <zipfileset dir="${release.examples.dir}"                       prefix="${project.name}/examples" />
            <zipfileset dir=".."             includes="license.txt"         prefix="${project.name}" />
            <zipfileset dir="${readme.dir}"  includes="*.txt"               prefix="${project.name}" />
        </zip>
        <zip destfile="${release.src.zip}"   comment="${lib.zip.comment} - Source code release">
            <zipfileset dir="${src.dir}"                                    prefix="${project.name}/src" />
            <zipfileset dir="${release.examples.dir}"                       prefix="${project.name}/examples" />
            <zipfileset dir="${release.javadoc.dir}"                        prefix="${project.name}/docs" />
            <zipfileset dir=".."             includes="license.txt"         prefix="${project.name}" />
            <zipfileset dir="${readme.dir}"  includes="*.txt"               prefix="${project.name}" />
        </zip>
    </target>

    <!-- ============================================================================================== -->
    <target name="javadoc" depends="init" description="Generate documentation">
        <mkdir dir="${release.javadoc.dir}" />
        <javadoc destdir="${release.javadoc.dir}" access="public" use="true" notree="false" nonavbar="false" noindex="false" splitindex="true" author="true" version="true" nodeprecatedlist="false" nodeprecated="false" sourcepath="${src.dir}" doctitle="fieldfxlibs (${project.name}) v${lib.version}" stylesheetfile="../res/stylesheet.css">
            <taglet name="ExampleTaglet" path="../res/code" />
            <classpath>
                <pathelement location="../lib/core.jar" />
            </classpath>
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <include name="**" />
            </packageset>
        </javadoc>
    </target>

    <!-- ============================================================================================== -->
    <target name="web">
        <mkdir dir="${release.dir}/web" />
        
        <copy todir="${release.web.dir}/docs">
            <fileset dir="../docs" />
        </copy>
        
        <copy todir="${release.web.dir}/examples">
            <fileset dir="${release.examples.dir}" />
        </copy>

        <copy todir="${release.web.dir}/download">
            <fileset file="${release.bin.zip}" />
            <fileset file="${release.src.zip}" />
        </copy>
        
        <copy todir="${release.web.dir}/">
            <fileset dir="../res/web" />
        </copy>
        
        <antcall target="parseFile">
            <param name="file" value="${release.web.dir}/index.html"/>
        </antcall>
        
        <antcall target="processExamples" />
        
        <replaceregexp file="${release.web.dir}/index.html" match="##examples##" replace="" flags="g" />
    </target>

    <!-- ============================================================================================== -->
    <!-- find and replace ##placeholder## keywords in a file -->
    <target name="parseFile">
        <echo message="${file}" />
        <replaceregexp file="${file}" match="##date##"                     replace="${date}"                      flags="g" />
        <replaceregexp file="${file}" match="##copyright##"                replace="${lib.copyright}"             flags="g" />
        <replaceregexp file="${file}" match="##author##"                   replace="${author.name} ${author.url}" flags="g" />
        <replaceregexp file="${file}" match="##author.name##"              replace="${author.name}"               flags="g" />
        <replaceregexp file="${file}" match="##author.url##"               replace="${author.url}"                flags="g" />
        <replaceregexp file="${file}" match="##library.name##"             replace="${lib.prettyName}"            flags="g" />
        <replaceregexp file="${file}" match="##project.name##"             replace="${project.name}"              flags="g" />
        <replaceregexp file="${file}" match="##library.version##"          replace="${lib.version}"               flags="g" />
        <replaceregexp file="${file}" match="##library.prettyVersion##"    replace="${lib.prettyVersion}"         flags="g" /> 
        <replaceregexp file="${file}" match="##library.url##"              replace="${lib.url}"                   flags="g" />
        <replaceregexp file="${file}" match="##library.category##"         replace="${lib.category}"              flags="g" />
        <replaceregexp file="${file}" match="##library.sentence##"         replace="${lib.sentence}"              flags="g" />
        <replaceregexp file="${file}" match="##library.paragraph##"        replace="${lib.paragraph}"             flags="g" />
        <replaceregexp file="${file}" match="##library.keywords##"         replace="${lib.keywords}"              flags="g" />
        <replaceregexp file="${file}" match="##library.dependencies##"     replace="${lib.dependencies}"          flags="g" />
        <replaceregexp file="${file}" match="##source.host##"              replace="${source.host}"               flags="g" />
        <replaceregexp file="${file}" match="##source.url##"               replace="${source.url}"                flags="g" />
        <replaceregexp file="${file}" match="##source.repository##"        replace="${source.repository}"         flags="g" />
        <replaceregexp file="${file}" match="##tested.platform##"          replace="${tested.platform}"           flags="g" />
        <replaceregexp file="${file}" match="##tested.processingVersion##" replace="${tested.processingVersion}"  flags="g" />
    </target>

    <!-- ============================================================================================== -->
    <target name="processExamples">
        <dirset id="examples.contents" dir="${release.examples.dir}" excludes="*/*"/>
        <property name="examples.list" refid="examples.contents"/>
        <property name="release.web.dir" id="release.web.dir" value="${release.web.dir}"/>
        <foreach list="${examples.list}" target="addExamples" param="exampleDir" delimiter=";">
            <reference refid="release.web.dir"/>
        </foreach>
    </target>
        
    <!-- ============================================================================================== -->
    <target name="addExamples">
        <echo>${exampleDir}</echo>
        <property name="release.web.dir" refid="release.web.dir"/>

        <propertyregex property="pde"
            input="${exampleDir}"
            regexp="^.*\/(.*)$"
            select="\1"
            casesensitive="false"
            defaultValue="${exampleDir}" />

        <propertyregex property="data"
            input="${exampleDir}"
            regexp="data$"
            select="true"
            casesensitive="false"
            defaultValue="false" />

        <if>
            <equals arg1="${data}" arg2="false" />
            <then>
              <replaceregexp file="${release.web.dir}/index.html"
                  match="(##examples##)"
                  replace="&lt;li&gt;&lt;a href=&quot;examples/${exampleDir}/${pde}.pde&quot;&gt;${exampleDir}&lt;/a&gt;&lt;/li&gt; \1"
                  flags="g" />
            </then>
            <else>
              <echo message="Data folder, attention." />
            </else>
        </if>
    </target>

     <!-- ============================================================================================== -->
    <target name="install">
        <echo>Installing library to sketch folder...</echo>
        <delete dir="${processing.sketch.dir}/libraries/${project.name}" />
        <unzip src="${release.bin.zip}" dest="${processing.sketch.dir}/libraries/" />
    </target>
    

    <target name="release" depends="init, clean, compile, javadoc, zips, web, install" />
</project>